#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('sample_back:server');
const http = require('http');
const schedule = require('node-schedule');
const droneService = require("../services/drone.service");

// Configuring the database
const dbConfig = require('../config/database.config.js');
const mongoose = require('mongoose');
let mongoDB = process.env.MONGODB_URI || dbConfig.url;

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
const io = require('socket.io')(server);
server.on('error', onError);
server.on('listening', onListening);

/**
 /**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Server is up and running on port number ' + port);
}

/**
 * Connect to the database
 */
mongoose.connect(mongoDB, {
    useNewUrlParser: true
}).then(() => {
    console.log("Successfully connected to the database");

    // initialize database with random position
    droneService.initializeDatabase();

    // socket Listener for sending drones position
    io.on('connection',  (socket)=> {
        setInterval( () =>{
                droneService.dronesList( (data) =>{
                    socket.emit('event', data);
                });
            }
            , 5000);

    });

    // change drone's position every 5 second
    const j = schedule.scheduleJob('*/5 * * * * *',  (fireDate) =>{
        droneService.movement();
        if (process.env.NODE_ENV != 'test')
            console.log('This job was supposed to run at ' + fireDate + ', but actually ran at ' + new Date());
    });

}).catch(err => {
    console.log('Could not connect to the database. Exiting now...', err);
    process.exit();
});
process.on('SIGINT', () =>{
    process.exit();
});

module.exports = app;